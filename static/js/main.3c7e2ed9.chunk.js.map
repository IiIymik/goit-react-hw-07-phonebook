{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","utils/nanoid.js","components/Form/Form.styled.js","components/Form/Form.jsx","components/App/App.styled.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilterValue","axios","defaults","baseURL","getFilter","state","contacts","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","contact","name","includes","nanoid","customAlphabet","FormEl","Input","TitleInput","Button","Form","dispatch","useDispatch","data","useSelector","useState","setName","number","setNumber","reset","checkContact","obj","normalizedName","find","onSubmit","e","preventDefault","id","compare","alert","a","contactsActions","post","then","catch","type","value","pattern","onChange","currentTarget","title","required","Container","TitleMain","TitleBook","List","Item","ButtonDel","ContactsList","length","map","onClick","contactId","delete","Label","Filter","valueFilter","App","useEffect","get","createReducer","_","payload","isLoading","error","action","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c7e2ed9.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\n// Fetch contacts\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n// Add contacts\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n// Delete contacts\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n//Add Filter value\nexport const changeFilterValue = createAction('contacts/changeFilterValue');\n","import axios from 'axios';\nimport * as contactsActions from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:2828';\n\nexport const getContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(contactsActions.addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch(e => dispatch(contactsActions.addContactError(e)));\n};\n\nexport const deleteContact = contactId => async dispatch => {\n  dispatch(contactsActions.deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(contactsActions.deleteContactSuccess(contactId)))\n    .catch(e => dispatch(contactsActions.deleteContactError(e)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import { customAlphabet } from 'nanoid';\nconst nanoid = customAlphabet('1234567890', 3);\nexport default nanoid;\n","import styled from '@emotion/styled/macro';\n\nexport const FormEl = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  margin-left: 5px;\n  margin-right: 5px;\n  line-height: 10px;\n  font-size: 16px;\n  &:focus {\n    outline: none;\n    border-color: blue;\n  }\n`;\n\nexport const TitleInput = styled.h2``;\n\nexport const Button = styled.button`\n  margin-left: 5px;\n  background-color: white;\n  color: green;\n  outline: none;\n  border: 1px dashed green;\n  padding: 3px;\n  &:hover,\n  :focus {\n    background-color: blue;\n    border: 1px dashed blue;\n    color: white;\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport {getVisibleContacts} from 'redux/contacts/contacts-selectors';\nimport nanoid from '../../utils/nanoid.js';\nimport { FormEl, Input, TitleInput, Button, } from './Form.styled.js';\n\nexport default function Form() {\n  const dispatch = useDispatch();\n  const data = useSelector(getVisibleContacts)\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const obj = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const compare = checkContact(data, obj);\n\n    if (compare) {\n      alert(`${compare.name} is already in contacts`)\n      return reset();\n    }\n    dispatch(addContact(obj));\n    reset();\n  }\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  }\n\n  const checkContact = (contacts, obj) => {\n    const { name } = obj;\n    const normalizedName = name.toLowerCase();\n    return contacts.find(contact => contact.name.toLowerCase().includes(normalizedName))\n  }\n\n  return (\n    <FormEl onSubmit={handleSubmit}>\n      <TitleInput>Name</TitleInput>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={(e) => setName(e.currentTarget.value)}\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <TitleInput>Number</TitleInput>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        onChange={(e) => setNumber(e.currentTarget.value)}\n        value={number}\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </FormEl>\n  )\n}\n\n\n\n\n\n\n\n\n","import styled from '@emotion/styled/macro';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const TitleMain = styled.h1`\n  margin-bottom: 15px;\n`;\n\nexport const TitleBook = styled.h2`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled/macro';\n\nexport const List = styled.ol`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-top: 10px;\n`;\n\nexport const Item = styled.li`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 12px;\n  padding: 10px;\n  border: 1px solid green;\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const ButtonDel = styled.button`\n  margin-left: 5px;\n  background-color: white;\n  color: red;\n  outline: none;\n  border: 1px dashed red;\n  &:hover,\n  :focus {\n    background-color: blue;\n    border: 1px dashed blue;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { List, Item, ButtonDel } from './ContactsList.styled.js';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { useDispatch } from 'react-redux';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n    return (\n        <List>\n            {contacts.length > 0 && contacts.map(({ id, name, number }) => (\n                <Item key={id} >{name}: {number}\n                    <ButtonDel type=\"button\" onClick={()=>dispatch(deleteContact(id))}>Delete</ButtonDel>\n                </Item>\n            ))}\n        </List>\n    )\n}\n\nexport default ContactsList\n","import styled from '@emotion/styled/macro';\n\nexport const Input = styled.input`\n  line-height: 10px;\n  font-size: 16px;\n  &:focus {\n    outline: none;\n    border-color: blue;\n  }\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 12px;\n  display: flex;\n  align-items: center;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Input, Label } from './Filter.styled.js';\nimport { changeFilterValue } from 'redux/contacts/contacts-actions';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n  const valueFilter = useSelector(getFilter)\n  const dispatch = useDispatch();\n  \n  return (\n    <Label>\n            Find Your Contact =>\n      <Input type=\"text\" value={valueFilter} onChange={(e)=> dispatch(changeFilterValue(e.currentTarget.value))} />\n    </Label>\n  )\n}\n\nexport default Filter\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Form from '../Form/Form';\nimport { Container, TitleMain, TitleBook, } from './App.styled.js'\nimport ContactsList from '../ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\nimport { getContacts} from 'redux/contacts/contacts-operations';\n\nexport default function App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts())\n  }, [dispatch])\n\n  return (\n    <Container>\n      <TitleMain>Phonebook</TitleMain>\n      <Form />\n      <TitleBook>Contacts</TitleBook>\n      <Filter />\n      <ContactsList />\n    </Container>\n  )\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  changeFilterValue,\n  fetchContactsSuccess,\n  fetchContactsRequest,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactError]: () => false,\n  [addContactSuccess]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, action) => action.payload,\n  [fetchContactsRequest]: () => null,\n});\n\nconst filter = createReducer('', {\n  [changeFilterValue]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  isLoading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from 'redux/contacts/contacts-reducer';\n\n// const middleware = [];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  // middleware,\n});\n\n// import { combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const store = createStore(rootReducer, composeWithDevTools());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport './utils/nanoid.js';\nimport { store } from './redux/store.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}